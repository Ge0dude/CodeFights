#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 22 10:13:32 2016

@author: brendontucker
"""

network = [[1, 4, 200], 
           [1, 2, 5], 
           [1, 3, 10], 
           [2, 3, 4], 
           [2, 4, 150], 
           [3, 4, 100]]
#smells like itertools
#how do I ensure the route is taken all the way to end node, or how do I even find
#the end node?
#yes, route generation is def number one now
rowPos = 0
colPos = 0
startList = list()
endList = list()
while rowPos < len(network):
    startList.append(network[rowPos][0])
    rowPos = rowPos + 1
rowPos = 0
while rowPos < len(network):
    endList.append(network[rowPos][1])
    rowPos = rowPos + 1
minValue = min(startList)
maxValue = max(endList)
range1 = maxValue - minValue
connectionNumber = (maxValue * (maxValue - 1)) / 2
zipped = list(zip(startList, endList))
options = [[] for x in range(range1)]
counter = 0
nodePos = minValue
appendPos = 0

counter = 0
nodePos = minValue
appendPos = 0
options2 = [[] for x in range(range1)]
while nodePos <= len(range((range1))):
    counter = 0
    while counter < len(network):
        if network[counter][0] == nodePos:
            options2[appendPos].append(network[counter])
        counter = counter + 1
    appendPos = appendPos + 1
    nodePos = nodePos + 1
    
routes = [[] for x in range(int(connectionNumber))]

network2 = list()
for x in network:
    network2.append(x)
counter = 0

#might build this in to  other loop
#takes care of special case, direct route to end terminal 
while counter < len(network2) :
    if network2[counter][0] == minValue and network2[counter][1] == maxValue:
        routes.append(network2[counter])
        network2.remove(network2[counter])
        counter = counter + 1
    else:
        counter = counter + 1

import itertools

group = list()
r = maxValue - 1
while r > 0:
    list1 = list(itertools.combinations(network2, r))
    group.append(list1)
    r = r - 1

#for x in network2:
#since tuples are immutable I'll have to use a more positivist approach
        

counter = 0    
counter2 = 0
counter3 = 0
nextMove = 1
appendPos = 0
while counter < 1:#len(group)
    counter2 = 0
    while counter2 <= len(group[counter]) - 1 :
        counter3 = 0
        while counter3 < len(group[counter][counter2]): # ?while nextmove?
            nextMove = 1
            while nextMove < maxValue and counter2 <= len(group[counter]) - 1:
                if group[counter][counter2][counter3][0] == nextMove: #is this recursion?
                    nextMove = group[counter][counter2][counter3][1]
                    if nextMove == maxValue:
                        routes[appendPos].append(group[counter][counter2])
                        appendPos = appendPos + 1
                        counter2 = counter2 + 1
                        nextMove = maxValue + 1  #just to see if teh loop break and reset works 
                    else:
                        nextMove = nextMove
                        counter3 = counter3 + 1
                else:
                    counter2 = counter2 + 1
    counter = counter + 1

