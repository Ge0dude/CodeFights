#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 22 10:13:32 2016

@author: brendontucker
"""

network = [[1, 4, 200], 
           [1, 2, 5], 
           [1, 3, 10], 
           [2, 3, 4], 
           [2, 4, 150], 
           [3, 4, 100]]
#smells like itertools
#how do I ensure the route is taken all the way to end node, or how do I even find
#the end node?
#yes, route generation is def number one now
rowPos = 0
colPos = 0
startList = list()
endList = list()
while rowPos < len(network):
    startList.append(network[rowPos][0])
    rowPos = rowPos + 1
rowPos = 0
while rowPos < len(network):
    endList.append(network[rowPos][1])
    rowPos = rowPos + 1
minValue = min(startList)
maxValue = max(endList)
range1 = maxValue - minValue
connectionNumber = (maxValue * (maxValue - 1)) / 2
zipped = list(zip(startList, endList))
options = [[] for x in range(range1)]
counter = 0
nodePos = minValue
appendPos = 0
while nodePos <= len(range((range1))):
    counter = 0
    while counter < len(zipped):
        if zipped[counter][0] == nodePos:
            options[appendPos].append(zipped[counter])
        counter = counter + 1
    appendPos = appendPos + 1
    nodePos = nodePos + 1

counter = 0
nodePos = minValue
appendPos = 0
options2 = [[] for x in range(range1)]
while nodePos <= len(range((range1))):
    counter = 0
    while counter < len(network):
        if network[counter][0] == nodePos:
            options2[appendPos].append(network[counter])
        counter = counter + 1
    appendPos = appendPos + 1
    nodePos = nodePos + 1
    
routes = [[] for x in range(int(connectionNumber))]

import itertools
group = list()
r = maxValue - 1
while r > 0:
    list1 = list(itertools.combinations(network, r))
    group.append(list1)
    r = r - 1



#len of options will always be n-1 , but no guarantees about sublengths
'''
appendPos = 0
counter = 0
counter2 = 0
nextMove = 0

while counter < maxValue - 1:
    if network[counter]
        if network[counter][1] == 4:
            appendPos = appendPos + 1
        else:
            nextMove = network[counter][1]
'''
'''
while appendPos < 2: #len(routes)
    while counter2 < len(options[counter]):
        while counter < len(options):
            options3.append(options[counter][counter2])        
'''

'''
counter = 0
counter1 = 0
while counter < len(options):
    while counter1 < len(options[counter]):
'''        
'''
#create a list with maximum possible number of routes, can delete empty 
#routes if max options aren't needed
routes = [[] for x in range(int(connectionNumber))]
#[[] for x in range(len(timeList))]

nodePos = minValue
counter1 = 0
counter2 = 0
appendPos = 0
while counter1 < len(network):
    if network[counter1][0] == nodePos:
        routes[appendPos].append(network[counter1])
        appendPos = appendPos + 1
    counter1 = counter1 + 1

counter1 = 0
while counter1 < len(routes):
    if routes[counter1][counter1][1] != maxValue:
'''        
'''
while counter1 < len(network):
    if network[counter1][0] == nodePos:
        routes[appendPos].append(network[counter1])
        appendPos = appendPos + 1
        while counter2 < range1:
            if routes[appendPos - 1][[appendPos - 1]][1] == maxValue:
                break
            else:
                routes[appendPos] = routes[appendPos - 1]
                routes[appendPos].append()
                
    counter1 = counter1 + 1
'''      
    