#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 13 11:56:33 2017

@author: brendontucker
"""

s = "Code(Cha(lle)nge)"

expectedOutput = "CodeegnlleahC"

length = len(s)

half = length // 2

paraCounter = 0 

for x in s:
    if x == '(':
        paraCounter += 1

        
prePara = list()

#creates portion of word that has no reverse applied at the begining
#might be harder to find Python in... "xxx(dd)Python(dd)xxxx"
closed1 = 0
closed2 = 0

preCounter = 0

while preCounter < len(s):
    if s[preCounter] == '(':
        closed2 = preCounter
        prePara = s[closed1:closed2]
        break
    else:
        preCounter += 1

    
# find inner sections
#max inner sections limited to number of parenthases

innerContent = [[] for x in range(paraCounter - 1)] #should be paraCounter -1
                       
closed1 = 0
closed2 = 0

innerCounter = 0
innerPos = 0
#put this all in a {while innerPos < len(innerContent)} ??
while innerCounter < len(s):
    if s[innerCounter] == ')':
        closed1 = innerCounter
        innerCounter += 1
        while innerCounter < len(s):
            if s[innerCounter] == '(':
                closed2 = innerCounter
                innerContent[innerPos] = s[closed1 + 1:closed2]
                innerPos += 1
                break
            else:
                innerCounter += 1
        
    else:
        innerCounter += 1        

#count parenthases
#determine innermost

#sList = list(s)
 
newS = [[] for x in range(paraCounter)]
        
newSCounter = 0
closed1 = 0
closed2 = 0
newSPos = 0

#also need to generate newS with more options now since I'm not using append or list methods
#and sticking with string manipulation
#might need to switch to list methods...
while newSCounter < 5: #len(s):
    if s[newSCounter] == '(':
        closed1 = newSCounter
        newSCounter += 1
        while newSCounter < len(s):  #need an if here for finding a '(' before ')'
            if s[newSCounter] == ')':
                closed2 = newSCounter
                newS[newSPos] = s[closed1 + 1:closed2]
                newSPos += 1
                break
            else:
                newSCounter += 1
    else:
        newSCounter += 1